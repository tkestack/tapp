/*
 * Tencent is pleased to support the open source community by making TKEStack
 * available.
 *
 * Copyright (C) 2012-2020 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 * https://opensource.org/licenses/Apache-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 */

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package tkestack.io.tapp.pkg.apis.tappcontroller.v1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "k8s.io/apimachinery/pkg/util/intstr/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1";

// TApp represents a set of pods with consistent identities.
message TApp {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the desired identities of pods in this tapp.
  optional TAppSpec spec = 2;

  // Status is the current status of pods in this TApp. This data
  // may be out of date by some window of time.
  optional TAppStatus status = 3;
}

// TAppList is a collection of TApp.
message TAppList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated TApp items = 2;
}

// A TAppSpec is the specification of a TApp.
message TAppSpec {
  // Replicas is the desired number of replicas of the given Template.
  // These are replicas in the sense that they are instantiations of the
  // same Template, but individual replicas also have a consistent identity.
  optional int32 replicas = 1;

  // Selector is a label query over pods that should match the replica count.
  // If empty, defaulted to labels on the pod template.
  // More info: http://releases.k8s.io/release-1.4/docs/user-guide/labels.md#label-selectors
  optional k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector selector = 2;

  // Template is the object that describes the pod that will be initial created/default scaled
  // it should be added to TemplatePool
  optional k8s.io.api.core.v1.PodTemplateSpec template = 3;

  // TemplatePool stores a map whose key is template name and value is podTemplate
  map<string, k8s.io.api.core.v1.PodTemplateSpec> templatePool = 4;

  // Statuses stores desired instance status instanceID --> desiredStatus
  map<string, string> statuses = 5;

  // Templates stores instanceID --> template name
  map<string, string> templates = 6;

  // UpdateStrategy indicates the StatefulSetUpdateStrategy that will be
  // employed to update Pods in the TApp
  optional TAppUpdateStrategy updateStrategy = 7;

  // ForceDeletePod indicates whether force delete pods when it is being deleted because of NodeLost.
  // Default values is false.
  optional bool forceDeletePod = 8;

  // AutoDeleteUnusedTemplate indicates whether auto delete templates when it is unused.
  // Default values is false.
  optional bool autoDeleteUnusedTemplate = 9;

  // NeverMigrate indicates whether to migrate pods. If it is true, pods will never be migrated to
  // other nodes, otherwise it depends on other conditions(e.g. pod restart policy).
  optional bool neverMigrate = 10;

  // volumeClaimTemplates is a list of claims that pods are allowed to reference.
  // The StatefulSet controller is responsible for mapping network identities to
  // claims in a way that maintains the identity of a pod. Every claim in
  // this list must have at least one matching (by name) volumeMount in one
  // container in the template. A claim in this list takes precedence over
  // any volumes in the template, with the same name.
  // TODO: Define the behavior if a claim already exists with the same name.
  repeated k8s.io.api.core.v1.PersistentVolumeClaim volumeClaimTemplates = 11;
}

// TAppStatus represents the current state of a TApp.
message TAppStatus {
  // most recent generation observed by controller.
  optional int64 observedGeneration = 1;

  // Replicas is the number of actual replicas.
  optional int32 replicas = 2;

  // ReadyReplicas is the number of running replicas
  optional int32 readyReplicas = 3;

  // ScaleSelector is a label for query over pods that should match the replica count used by HPA.
  optional string scaleLabelSelector = 4;

  // AppStatus describe the current TApp state
  optional string appStatus = 5;

  // Statues stores actual instanceID --> InstanceStatus
  map<string, string> statuses = 6;
}

// Only support rolling update now
message TAppUpdateStrategy {
  // Template is the rolling update template name
  optional string template = 1;

  // MaxUnavailable is the max unavailable number when tapp is rolling update, default is 1.
  optional k8s.io.apimachinery.pkg.util.intstr.IntOrString maxUnavailable = 2;
}

